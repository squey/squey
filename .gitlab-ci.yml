variables:
  BASE_IMAGE_NAME: registry.gitlab.com/squey/container-images/squey_build:bbed5e6c
  GIT_SUBMODULE_STRATEGY: recursive
  CACHE_COMPRESSION_LEVEL: "fastest"
  CODE_COVERAGE:
    value: "false"
    description: "Only update the code coverage report"

stages:
  - check
  - static_analysis
  - build
  - test
  - macos_publish
  - pages
  - flathub_publish
  - stop

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/'

cancel_scheduled_pipeline_if_already_ran_for_this_commit:
  stage: check
  script:
    - |
      existing_pipeline=$(curl --silent --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines?sha=$CI_COMMIT_SHA" | jq '.[] | select(.id != '$CI_PIPELINE_ID')')
      if [ -n "$existing_pipeline" ]; then
        echo "Already built, skipping pipeline."
        curl --request POST --form token="$CI_JOB_TOKEN" \
          --form ref="$CI_COMMIT_REF_NAME" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipeline/cancel"
        exit 0
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

builder appstream-linter:
  image:
    name: ghcr.io/flathub/flatpak-builder-lint:latest
    entrypoint: [""]
  stage: static_analysis
  tags:
    - privileged-docker
  before_script:
    - pip install jinja2-cli
  script:
    - cd buildstream
    - APPSTREAM_LINTER=true ./generate_appstream_metadata.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - README.md
        - buildstream/files/org.squey.Squey.metainfo.xml.j2
  interruptible: true
  allow_failure: false

.build:
  stage: build
  image:
    name: "$BASE_IMAGE_NAME"
    pull_policy: [if-not-present]
  tags:
    - privileged-docker
  before_script:
    - |
      export PUSH_ARTIFACTS=$([ `git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA buildstream | wc -l` -ne 0 ] && echo "true" || echo "false")
      # git lfs pull
      for f in .git/modules/*/config .git/config; do sed "s/gitlab-ci-token:[[:alnum:]]\+/gitlab-ci_read-repository:$GITLAB_DEPLOY_TOKEN_READ_REPOSITORY/g" -i "$f"; done
      cd buildstream
  interruptible: true

.archs:
  macos-arm64: # macOS Apple Silicon
    matrix:
      - TARGET_TRIPLE: aarch64-apple-darwin
        TARGET_TAG: saas-macos-large-m2pro
        IMAGE_NAME: macos-15-xcode-16
  macos-x86_64: # macOS Intel
    matrix:
      - TARGET_TRIPLE: x84_64-apple-darwin
        TARGET_TAG: ""
        IMAGE_NAME: ""
  windows:
    matrix:
      # Windows
      - TARGET_TRIPLE: x86_64-w64-mingw32
        TARGET_TAG: saas-windows-medium-amd64
        IMAGE_NAME: ""

build and run testsuite linux:
  extends: .build
  script:
    - ./build.sh
      --cxx-compiler=$([ "$CODE_COVERAGE" == true ] && echo "g++" || echo "clang++")
      --branch="${CI_COMMIT_REF_NAME}"
      --export=$(echo $CI_MERGE_REQUEST_LABELS | grep -q "export_linux_package" && echo true || echo false)
      --export-dir="/srv/flatpak_repo"
      --code-coverage=$CODE_COVERAGE
      --push-artifacts="${PUSH_ARTIFACTS}"
  coverage: '/lines\.+: (\d+\.\d+)% \(\d+ of \d+ lines\)/'
  rules:
    - if: '$CI_COMMIT_TAG =~ "/^$/"'
  artifacts:
    when: always
    paths:
      - junit.xml
      - code_coverage_report
      - export
    reports:
      junit: junit.xml

build testsuite windows:
  extends: .build
  script:
    - ./build.sh
      --target_triple="${TARGET_TRIPLE}"
      --user-target=customer
      --branch="${CI_COMMIT_REF_NAME}"
      --export=true
      --export-dir="$CI_PROJECT_DIR/export"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - if: "$CI_MERGE_REQUEST_LABELS =~ /(^|,)export_windows_package(,|$)/"
      when: always
    - if: '$CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/'
      when: always
    - when: never
  artifacts:
    when: always
    paths:
      - junit.xml
      - export
    reports:
      junit: junit.xml
  parallel: !reference [.archs, windows]

build testsuite macos:
  extends: .build
  script:
    - ./build.sh
      --target_triple="aarch64-apple-darwin"
      --macos-sdk-dir="/srv/macos_sdk"
      --user-target=customer
      --branch="${CI_COMMIT_REF_NAME}"
      --export=true
      --export-dir="$CI_PROJECT_DIR/export"
    - ./build.sh
      --target_triple="x86_64-apple-darwin"
      --macos-sdk-dir="/srv/macos_sdk"
      --user-target=customer
      --branch="${CI_COMMIT_REF_NAME}"
      --export=true
      --export-dir="$CI_PROJECT_DIR/export"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - if: "$CI_MERGE_REQUEST_LABELS =~ /(^|,)export_macos_package(,|$)/"
      when: always
    - if: '$CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/'
      when: always
    - when: never
  artifacts:
    when: always
    paths:
      - junit.xml
      - export
    reports:
      junit: junit.xml

.run testsuite macos:
  - .gitlab-ci/run_testsuite.sh

.run testsuite windows:
  - .gitlab-ci\run_testsuite.ps1

.run testsuite:
  stage: test
  image: $IMAGE_NAME
  tags:
    - $TARGET_TAG
  before_script: |
    git submodule update --init --recursive src/tests # src/libpvcop
  needs:
    - job: build testsuite
      artifacts: true
  variables:
    GIT_SUBMODULE_STRATEGY: none
  artifacts:
    when: always
    paths:
      - junit.xml
    reports:
      junit: junit.xml
  interruptible: true

run testsuite windows:
  extends: .run testsuite
  parallel: !reference [.archs, windows]
  script:
    - !reference [.run testsuite windows]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - if: "$CI_MERGE_REQUEST_LABELS =~ /(^|,)export_windows_package(,|$)/"
      when: always
    - if: '$CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/'
      when: always
    - when: never
  needs:
    - job: build testsuite windows
      artifacts: true

run testsuite macos:
  extends: .run testsuite
  parallel: !reference [.archs, macos-arm64]
  script:
    - !reference [.run testsuite macos]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always
    - if: "$CI_MERGE_REQUEST_LABELS =~ /(^|,)export_macos_package(,|$)/"
      when: always
    - if: '$CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/'
      when: always
    - when: never
  needs:
    - job: build testsuite macos
      artifacts: true
  allow_failure: false

build release linux:
  extends: .build
  script:
    - ./build.sh
      --user-target=customer
      --cxx-compiler=clang++
      --branch="${CI_COMMIT_REF_NAME}"
      --export=true
      --export-dir="$CI_PROJECT_DIR/public/flatpak"
      --gpg-private-key-path=$GPG_PRIVATE_KEY
      --gpg-sign-key=ADAD28A413FCB239A979C83B7C828C315B98BC63
      --upload-debug-symbols=true
      --push-artifacts="${PUSH_ARTIFACTS}"
  artifacts:
    paths:
      - public/flatpak
  rules:
    - if: $CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/
      when: always
  allow_failure: false

macos_publish:
  stage: macos_publish
  image: "$IMAGE_NAME"
  variables:
    GIT_SUBMODULE_STRATEGY: none
  tags:
    - $TARGET_TAG
  parallel: !reference [.archs, macos-arm64]
  before_script:
    - gem install fastlane
  script:
    - |
      "$CI_PROJECT_DIR/.gitlab-ci/macos_publish.sh"
  artifacts:
    paths:
      - public
  needs:
    - job: build testsuite macos
      artifacts: true
    - job: run testsuite macos
      artifacts: false
    - job: run testsuite windows
      artifacts: false
    - job: build release linux
      artifacts: false
  rules:
    - if: $CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/

pages:
  stage: pages
  image: "$BASE_IMAGE_NAME"
  tags:
    - privileged-docker
  before_script:
    - mkdir -p $CI_PROJECT_DIR/public/code_quality_report
  script:
    - |
      VERSION=$(cat $CI_PROJECT_DIR/VERSION.txt | tr -d '\n')
      PIPELINE_ID=`curl -s -X GET ${CI_API_V4_URL}/projects/squey%2Fsquey/pipelines?scope=tags | jq -r .[0].id`
      JOB_ID=`curl -s -X GET ${CI_API_V4_URL}/projects/squey%2Fsquey/pipelines/${PIPELINE_ID}/jobs | jq -r '.[] | select(.stage=="pages") | .id'`
      if [ "$CODE_COVERAGE" = "true" ]; then
        curl -XGET -L ${CI_PROJECT_URL}/-/jobs/${JOB_ID}/artifacts/download | bsdtar -xvf- || true
        rm -rf $CI_PROJECT_DIR/public/code_coverage_report
        mv code_coverage_report $CI_PROJECT_DIR/public
        exit 0
      fi
      ostree checkout -U --repo="$CI_PROJECT_DIR/public/flatpak" app/org.squey.Squey/x86_64/release-$VERSION public/flatpak_app && cd public/flatpak_app && XZ_OPT=-9T0 tar Jcvf "$CI_PROJECT_DIR/public/squey_flatpak_$VERSION.tar.xz" . && cd - && rm -rf "$CI_PROJECT_DIR/public/flatpak_app"
      rm -rf "$CI_PROJECT_DIR/public/flatpak"
      mv "$CI_PROJECT_DIR/export/x86_64-w64-mingw32/squey-win64-standalone-latest.zip" "$CI_PROJECT_DIR/public"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: public/code_coverage_report/cobertura-coverage.xml
    paths:
      - public
    when: on_success
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/ || $CODE_COVERAGE == "true"'
  needs:
    - job: macos_publish
      artifacts: true
  interruptible: true

flathub:
  stage: flathub_publish
  image: "$BASE_IMAGE_NAME"
  tags:
    - privileged-docker
  needs:
    - pages
  before_script:
    - |
      export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
      eval $(ssh-agent -s)
      echo "$SSH_FLATHUB_PRIVATE_KEY_B64" | base64 -d | ssh-add - > /dev/null
      rm -rf org.squey.Squey
      git clone git@github.com:flathub/org.squey.Squey.git
      git config --global user.name "$FLATHUBGITCREDENTIALUSERNAME"
      git config --global user.email "$FLATHUBGITCREDENTIALEMAIL"
      export VERSION=$(cat $CI_PROJECT_DIR/VERSION.txt | tr -d '\n')
      export BRANCH_NAME="publish-$VERSION"
      cd "$CI_PROJECT_DIR/org.squey.Squey"
      git checkout -b "$BRANCH_NAME"
  script:
    - |
      cp "$CI_PROJECT_DIR/buildstream/flathub/flathub.json" "$CI_PROJECT_DIR/org.squey.Squey"
      jinja2 -D sha256=$(sha256sum "$CI_PROJECT_DIR/public/squey_flatpak_$VERSION.tar.xz" | awk '{print $1 }') -D version=$VERSION $CI_PROJECT_DIR/buildstream/flathub/org.squey.Squey.yaml.j2 > "$CI_PROJECT_DIR/org.squey.Squey/org.squey.Squey.yaml"
      git commit -a -m "Publish version $VERSION" || echo "No changes to commit"
      git push -f --set-upstream origin "$BRANCH_NAME"
      echo "$FLATHUB_GITHUB_PR_TOKEN" | gh auth login --with-token
      gh pr --repo "flathub/org.squey.Squey" create --head master --base "$BRANCH_NAME" --fill || true
      gh pr --repo "flathub/org.squey.Squey" merge "$BRANCH_NAME" --auto --merge --delete-branch
  rules:
    - if: $CI_COMMIT_TAG =~ /^release-\d+\.\d+\.\d+$/

sast:
  variables:
    SAST_EXCLUDED_PATHS: external, tests, doc
    SAST_EXCLUDED_ANALYZERS:
      bandit, brakeman, gosec, kubesec, nodejs-scan, phpcs-security-audit,
      pmd-apex, security-code-scan, sobelow, spotbugs, flawfinder
  stage: static_analysis
  tags:
    - privileged-docker
include:
  - template: Security/SAST.gitlab-ci.yml
  #- template: Code-Quality.gitlab-ci.yml
  #- template: Jobs/Secret-Detection.latest.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml

semgrep-sast:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
#secret_detection:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "push"'
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#  interruptible: true

#code_quality_html:
#  extends: code_quality
#  variables:
#    REPORT_FORMAT: html
#  artifacts:
#    paths: [gl-code-quality-report.html]
