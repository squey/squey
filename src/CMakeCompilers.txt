#
# @file
#

set(CMAKE_CONFIGURATION_TYPES debug release relwithdebinfo calltrace distrib)

if (NOT DEFINED ARCH_TYPE)
	set(ARCH_TYPE "native")
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_ARCH_FLAGS "-march=${ARCH_TYPE}")

set(CMAKE_CXX_COMMON_FLAGS "-Wall -Wextra ${CMAKE_CXX_ARCH_FLAGS} -fPIC")

if (CODE_COVERAGE)
	set(CODE_COVERAGE_FLAGS "-O0 --coverage")
    set(CTEST_COVERAGE_COMMAND "gcov")
    message(STATUS "Code coverage instrumentation enabled")
endif()

set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "${CMAKE_CXX_COMMON_FLAGS} ${CODE_COVERAGE_FLAGS}")

###############################################################################
# Configure linker
###############################################################################
# Use ld.mold if available
OPTION(USE_LD_MOLD "Use mold linker" ON)
if (USE_LD_MOLD)
    execute_process(COMMAND ${CMAKE_CXX_COMPILER} -fuse-ld=mold -Wl,--version ERROR_QUIET OUTPUT_VARIABLE LD_VERSION)
    if ("${LD_VERSION}" MATCHES "mold")
        message(STATUS "using mold linker as it is available.")
        set(CMAKE_LINKER_TYPE "MOLD")
    else ()
        message(WARNING "mold linker isn't available, using the default system linker.")
        set(USE_LD_MOLD OFF)
    endif ()
endif () 

# Use ccache if installed
find_program(CCACHE_PROGRAM ccache)
if(NOT CODE_COVERAGE)
    if(CCACHE_PROGRAM)
        set(CXX_LAUNCHER "${CCACHE_PROGRAM}")
        message(STATUS "Compilation will be done with CCache")
        message(STATUS "CCACHE_DIR=${CCACHE_DIR}")
    endif()
endif()

MESSAGE(STATUS "Build type is ${CMAKE_BUILD_TYPE}")

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	set(CMAKE_CXX_COMMON_FLAGS "-Qunused-arguments ${CMAKE_CXX_COMMON_FLAGS}")
endif()

OPTION(USE_LTO "Use LTO" OFF)
if (${USER_TARGET} STREQUAL "Customer")
    set(USE_LTO true)
endif()
if (USE_LD_MOLD AND USE_LTO)
	message(STATUS "LTO will be used.")
    set(LTO_CXX_FLAGS "-flto")
    set(LTO_LINK_FLAGS "-flto")
else()
	message(STATUS "LTO won't be used.")
	set(LTO_CXX_FLAGS "")
	set(LTO_LINK_FLAGS "")
endif()

set(CMAKE_CXX_COMMON_FLAGS "${CMAKE_CXX_COMMON_FLAGS} ${LTO_CXX_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG "-ggdb ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_DEBUG ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG ${LTO_LINK_FLAGS})

set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -DNDEBUG ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_RELEASE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE ${LTO_LINK_FLAGS})

set(CMAKE_CXX_FLAGS_DISTRIB "-Ofast -ggdb -DNDEBUG ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_DISTRIB ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_DISTRIB ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_DISTRIB ${LTO_LINK_FLAGS})

set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Ofast -ggdb -DNDEBUG ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${LTO_LINK_FLAGS})

message(STATUS CMAKE_CXX_FLAGS_RELWITHDEBINFO=${CMAKE_CXX_FLAGS_RELWITHDEBINFO})

# due to a GCC problem, instrinsics must be exluded from instrumentation
# http://nic.uoregon.edu/pipermail/tau-users/2012-September/000713.htm
# http://nic.uoregon.edu/pipermail/tau-users/2012-September/000717.html
set(CMAKE_CXX_FLAGS_CALLTRACE "-ggdb -finstrument-functions -finstrument-functions-exclude-file-list=intrin,include/c++,include/tbb,include/boost ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_CALLTRACE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_CALLTRACE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_CALLTRACE ${LTO_LINK_FLAGS})
