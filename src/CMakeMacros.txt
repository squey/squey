#
# @file
#

macro(declare_internal_library libname)
	string(TOUPPER ${libname} libname_upper)
	string(TOLOWER ${libname} libname_lower)
	# Add dev includes and build includes as possible include dir
	# Build includes are required because of ui_xxx.h generated files
	# Dev includes are required because they are use before being copy in build directory
	set(${libname_upper}_INCLUDE_DIRS "${CMAKE_CURRENT_BINARY_DIR}/lib${libname_lower}/include"
					  "${CMAKE_CURRENT_SOURCE_DIR}/lib${libname_lower}/include")
	add_subdirectory(lib${libname_lower})
endmacro()

function(pv_qt6_wrap_ui outfiles include_dir)
	set(options)
	set(oneValueArgs)
	set(multiValueArgs OPTIONS)

	cmake_parse_arguments(_WRAP_UI "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

	set(ui_files ${_WRAP_UI_UNPARSED_ARGUMENTS})
	set(ui_options ${_WRAP_UI_OPTIONS})

	foreach(it ${ui_files})
		get_filename_component(outfile ${it} NAME_WE)
		get_filename_component(infile ${it} ABSOLUTE)
		set(outfile ${CMAKE_CURRENT_BINARY_DIR}/../include/${include_dir}/ui_${outfile}.h)
		add_custom_command(OUTPUT ${outfile}
			COMMAND Qt6::uic
			ARGS ${ui_options} -o ${outfile} ${infile}
			MAIN_DEPENDENCY ${infile} VERBATIM)
		list(APPEND ${outfiles} ${outfile})
	endforeach()
	set(${outfiles} ${${outfiles}} PARENT_SCOPE)
endfunction()

macro(declare_customer_cap cap default_dev default_customer)
	# Default value
	if (NOT DEFINED ${cap})
		if (SQUEY_DEVELOPER_MODE)
			set(${cap} ${default_dev})
		else()
			set(${cap} ${default_customer})
		endif()
	endif()
endmacro()

###############################################################################
# Function to define a test
#
# Syntax to use it : add_squey_compile_test(binary_name LINKS libs_to_link FILES files_to_compile)
#
# Compilation for tests declared with this function arre added to the testsuite
# dependency
###############################################################################
function(add_squey_compile_test test_exe)
	# Define all kinds of arguments
	set(options)
	set(oneValueArgs)
	set(multiValueArgs FILES LINKS)

	# Call cmake_parse_arguments to extract information in variables
	cmake_parse_arguments(_WRAP_TEST "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

	set(args ${_WRAP_TEST_UNPARSED_ARGUMENTS})
	set(files ${_WRAP_TEST_FILES})
	set(links ${_WRAP_TEST_LINKS})
	
	# Now, we have all arguments, compile the executable
	add_executable(SQUEY_TEST_${test_exe} EXCLUDE_FROM_ALL ${files})
	set(TEST_FOLDER "../../../../../../src/tests/files")
	if (links STREQUAL "pvkernel")
		set(TEST_FOLDER "../${TEST_FOLDER}")
	endif()
	target_compile_definitions(SQUEY_TEST_${test_exe} PRIVATE TEST_FOLDER=\"${TEST_FOLDER}\")
	# Link library with it
	target_link_libraries(SQUEY_TEST_${test_exe} ${links})
	# All of this will be done on the already defined squey_testsuite target
	add_dependencies(squey_testsuite SQUEY_TEST_${test_exe})
endfunction()

function(add_squey_test test_exe test_name)
	add_test(SQUEY_TEST_${test_exe} SQUEY_TEST_${test_name} ${ARGN})
endfunction()

function(add_bench bench_name)
	#add_squey_compile_test(SQUEY_BENCH_${bench_name} ${ARGN})
	#set_target_properties(SQUEY_BENCH_${bench_name} PROPERTIES COMPILE_FLAGS "-DSQUEY_BENCH ${PROGRAM_COMPILE_FLAGS}")
	#add_squey_test(SQUEY_BENCH_${bench_name} ${CMAKE_SOURCE_DIR}/scripts/run_bench.py ${CMAKE_CURRENT_BINARY_DIR}/SQUEY_BENCH_${bench_name})
endfunction()

function(strcasecmp res str1 str2)
	string(TOLOWER ${str1} str1_lower)
	string(TOLOWER ${str2} str2_lower)
	string(COMPARE EQUAL str1_lower str2_lower res)
endfunction()

# GCC version
macro(GET_GCC_VERSION major minor)
	execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion
                    OUTPUT_VARIABLE GCC_VERSION)
	string(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
	list(GET GCC_VERSION_COMPONENTS 0 ${major})
	list(GET GCC_VERSION_COMPONENTS 1 ${minor})
endmacro()
