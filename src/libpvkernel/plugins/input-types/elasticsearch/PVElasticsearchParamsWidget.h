/* * MIT License
 *
 * Â© ESI Group, 2015
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 *
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 *
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef __PVELASTICSEARCHPARAMSWIDGET_H__
#define __PVELASTICSEARCHPARAMSWIDGET_H__

// Generated by 'uic'. Cf. ../CMakeFiles.txt
#include "../common/PVParamsWidget.h"
#include "../../common/elasticsearch/PVElasticsearchAPI.h"
#include "../../common/elasticsearch/PVElasticsearchInfos.h"
#include "../../common/elasticsearch/PVElasticsearchQuery.h"
#include "PVElasticsearchPresets.h"

#include <pvkernel/widgets/PVQueryBuilder.h>
#include <pvkernel/widgets/PVQueryBuilder.h>

#include "PVElasticsearchPresets.h"

namespace PVWidgets
{
class PVFilterableComboBox;
}

namespace PVRush
{

class PVInputTypeElasticsearch;
class PVElasticsearchQuery;
class PVElasticsearchInfos;

class PVElasticsearchParamsWidget : public PVParamsWidget<PVInputTypeElasticsearch,
                                                          PVElasticsearchPresets,
                                                          PVElasticsearchInfos,
                                                          PVElasticsearchQuery>
{
	Q_OBJECT

  private:
	enum EQueryType {
		QUERY_BUILDER = 0,
		JSON,
		SQL,

		COUNT
	};

  public:
	PVElasticsearchParamsWidget(PVInputTypeElasticsearch const* in_t,
	                            PVRush::hash_formats const& formats,
	                            QWidget* parent);

  public:
	QString get_server_query(std::string* error = nullptr) const override;
	QString get_serialize_query() const override;

  protected:
	size_t query_result_count(std::string* error = nullptr) override;
	bool fetch_server_data(const PVElasticsearchInfos& infos) override;
	void query_type_changed_slot() override;
	QString get_export_filters() override;
	void accept() override;
	PVElasticsearchInfos get_infos() const override;
	bool set_infos(PVElasticsearchInfos const& infos) override;
	void set_query(QString const& query) override;
	bool check_connection(std::string* error = nullptr) override;
	void export_query_result(PVCore::PVStreamingCompressor& compressor,
	                         const std::string& sep,
	                         const std::string& quote,
	                         bool header,
	                         PVCore::PVProgressBox& pbox,
	                         std::string* error = nullptr) override;
	void edit_custom_format() override;

  private:
	void index_changed_slot(int index);
	void index_changed_by_user_slot();
	void fetch_server_data_slot();
	void update_custom_format();
	void reset_columns_tree_widget();
	void set_columns_tree_widget_selection(const QString& filter_path);
	void tree_item_changed(QTreeWidgetItem* item, int column);
	size_t get_selected_columns_count() const;
	void set_query_type(QString const& query_type);
	QString get_sql_query_prefix() const;

  private:
	QPushButton* _btn_refresh;
	PVWidgets::PVFilterableComboBox* _combo_index;
	QTreeWidgetItem* _root_item = nullptr;
};

} // namespace PVRush

#endif // __PVELASTICSEARCHPARAMSWIDGET_H__
