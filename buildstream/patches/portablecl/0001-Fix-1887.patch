From cd9545ff7a8ae7ac632496a075feefab5a1658d1 Mon Sep 17 00:00:00 2001
From: Jean-Baptiste Leonesio <jbleonesio@squey.org>
Date: Mon, 12 May 2025 17:24:57 +0200
Subject: [PATCH] Fix 1887

Use "pocl_get_string_option" to retrieve LOCALAPPDATA and TEMP environment variables under Windows.
Modified "getenv_helper" to convert values to UTF-8 under Windows.
---
 lib/CL/pocl_cache.c          |  6 +++---
 lib/CL/pocl_runtime_config.c | 37 ++++++++++++++++++++++--------------
 2 files changed, 26 insertions(+), 17 deletions(-)

diff --git a/lib/CL/pocl_cache.c b/lib/CL/pocl_cache.c
index 9a7f47d57..5f1685c6c 100644
--- a/lib/CL/pocl_cache.c
+++ b/lib/CL/pocl_cache.c
@@ -563,12 +563,12 @@ pocl_cache_init_topdir ()
       return CL_FAILED;
 
 #elif defined(_WIN32)
-      tmp_path = getenv ("TEMP");
+      tmp_path = pocl_get_string_option ("LOCALAPPDATA", NULL);
       if (!tmp_path) {
-	tmp_path = getenv("LOCALAPPDATA");
+          tmp_path = pocl_get_string_option ("TEMP", NULL);
       }
       if (tmp_path == NULL)
-	return CL_FAILED;
+        return CL_FAILED;
       needed = snprintf (cache_topdir, POCL_MAX_PATHNAME_LENGTH, "%s\\pocl",
                          tmp_path);
 #else
diff --git a/lib/CL/pocl_runtime_config.c b/lib/CL/pocl_runtime_config.c
index 60f19e72e..eabf5fca8 100644
--- a/lib/CL/pocl_runtime_config.c
+++ b/lib/CL/pocl_runtime_config.c
@@ -29,7 +29,7 @@
 #include <stdlib.h>
 #include <string.h>
 
-#ifdef __WIN32__
+#ifdef _WIN32
 
 #include <windows.h>
 
@@ -40,29 +40,31 @@ static const char *
 getenv_helper (const char *key)
 {
   // Convert key to wide char
-  size_t len = strlen (key) + 1;
-  wchar_t *wkey = (wchar_t *)malloc (len * sizeof (wchar_t));
+  int wkey_len = MultiByteToWideChar (CP_ACP, 0, key, -1, NULL, 0);
+  if (wkey_len <= 0)
+    return NULL;
+
+  wchar_t *wkey = (wchar_t *)malloc (wkey_len * sizeof (wchar_t));
   if (!wkey)
-    {
-      return NULL;
-    }
-  mbstowcs (wkey, key, len);
+    return NULL;
+
+  MultiByteToWideChar (CP_ACP, 0, key, -1, wkey, wkey_len);
 
-  unsigned long size = GetEnvironmentVariableW (wkey, NULL, 0);
-  if (size == 0)
+  DWORD wval_len = GetEnvironmentVariableW (wkey, NULL, 0);
+  if (wval_len == 0)
     {
       free (wkey);
       return NULL;
     }
 
-  wchar_t *wval = (wchar_t *)malloc (size * sizeof (wchar_t));
+  wchar_t *wval = (wchar_t *)malloc (wval_len * sizeof (wchar_t));
   if (!wval)
     {
       free (wkey);
       return NULL;
     }
 
-  if (GetEnvironmentVariableW (wkey, wval, size) == 0)
+  if (GetEnvironmentVariableW (wkey, wval, wval_len) == 0)
     {
       free (wkey);
       free (wval);
@@ -71,15 +73,22 @@ getenv_helper (const char *key)
 
   free (wkey);
 
-  size_t needed = wcstombs (NULL, wval, 0) + 1;
-  char *result = (char *)malloc (needed);
+  int utf8_len
+    = WideCharToMultiByte (CP_UTF8, 0, wval, -1, NULL, 0, NULL, NULL);
+  if (utf8_len <= 0)
+    {
+      free (wval);
+      return NULL;
+    }
+
+  char *result = (char *)malloc (utf8_len);
   if (!result)
     {
       free (wval);
       return NULL;
     }
 
-  wcstombs (result, wval, needed);
+  WideCharToMultiByte (CP_UTF8, 0, wval, -1, result, utf8_len, NULL, NULL);
   free (wval);
   return result; // Still leaks to match getenv behavior
 }
-- 
2.51.0

