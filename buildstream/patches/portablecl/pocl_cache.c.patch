diff --git a/lib/CL/pocl_cache.c b/lib/CL/pocl_cache.c
index f98ee4185..eec2be5dd 100644
--- a/lib/CL/pocl_cache.c
+++ b/lib/CL/pocl_cache.c
@@ -550,9 +550,9 @@ pocl_cache_init_topdir ()
       return CL_FAILED;
 
 #elif defined(_WIN32)
-        tmp_path = getenv("LOCALAPPDATA");
+        tmp_path = pocl_get_string_option ("LOCALAPPDATA", NULL);
         if (!tmp_path)
-          tmp_path = getenv ("TEMP");
+          tmp_path = pocl_get_string_option ("TEMP", NULL);
         if (tmp_path == NULL)
           return CL_FAILED;
         needed = snprintf (cache_topdir, POCL_MAX_PATHNAME_LENGTH, "%s\\pocl",
diff --git a/lib/CL/pocl_runtime_config.c b/lib/CL/pocl_runtime_config.c
index 60f19e72e..fabfb8aca 100644
--- a/lib/CL/pocl_runtime_config.c
+++ b/lib/CL/pocl_runtime_config.c
@@ -40,47 +40,55 @@ static const char *
 getenv_helper (const char *key)
 {
   // Convert key to wide char
-  size_t len = strlen (key) + 1;
-  wchar_t *wkey = (wchar_t *)malloc (len * sizeof (wchar_t));
-  if (!wkey)
-    {
-      return NULL;
-    }
-  mbstowcs (wkey, key, len);
-
-  unsigned long size = GetEnvironmentVariableW (wkey, NULL, 0);
-  if (size == 0)
-    {
-      free (wkey);
-      return NULL;
-    }
+  int wkey_len = MultiByteToWideChar(CP_ACP, 0, key, -1, NULL, 0);
+  if (wkey_len <= 0)
+    return NULL;
 
-  wchar_t *wval = (wchar_t *)malloc (size * sizeof (wchar_t));
-  if (!wval)
-    {
-      free (wkey);
-      return NULL;
-    }
+  wchar_t *wkey = (wchar_t *)malloc(wkey_len * sizeof(wchar_t));
+  if (!wkey)
+    return NULL;
 
-  if (GetEnvironmentVariableW (wkey, wval, size) == 0)
-    {
-      free (wkey);
-      free (wval);
-      return NULL;
-    }
+  MultiByteToWideChar(CP_ACP, 0, key, -1, wkey, wkey_len);
 
-  free (wkey);
+  DWORD wval_len = GetEnvironmentVariableW(wkey, NULL, 0);
+  if (wval_len == 0)
+  {
+    free(wkey);
+    return NULL;
+  }
 
-  size_t needed = wcstombs (NULL, wval, 0) + 1;
-  char *result = (char *)malloc (needed);
+  wchar_t *wval = (wchar_t *)malloc(wval_len * sizeof(wchar_t));
+  if (!wval)
+  {
+    free(wkey);
+    return NULL;
+  }
+
+  if (GetEnvironmentVariableW(wkey, wval, wval_len) == 0)
+  {
+    free(wkey);
+    free(wval);
+    return NULL;
+  }
+
+  free(wkey);
+
+  int utf8_len = WideCharToMultiByte(CP_UTF8, 0, wval, -1, NULL, 0, NULL, NULL);
+  if (utf8_len <= 0)
+  {
+    free(wval);
+    return NULL;
+  }
+
+  char *result = (char *)malloc(utf8_len);
   if (!result)
-    {
-      free (wval);
-      return NULL;
-    }
+  {
+    free(wval);
+    return NULL;
+  }
 
-  wcstombs (result, wval, needed);
-  free (wval);
+  WideCharToMultiByte(CP_UTF8, 0, wval, -1, result, utf8_len, NULL, NULL);
+  free(wval);
   return result; // Still leaks to match getenv behavior
 }
 #else
