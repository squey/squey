#!/bin/bash

PS1='[\u@\h \W]\$ '
alias ls='ls --color=auto'

# Use host X server if we are running under WSL
WSL=$(uname -a | grep -q -i "microsoft" && echo 1)
if [[ "$WSL" == 1 ]]; then
    export DISPLAY=$(echo `cat /etc/resolv.conf | grep nameserver | awk '{print $2; exit;}'`:0.0)
fi

cd "$SOURCE_DIR"
source buildstream/env.conf
source "/etc/target_env_vars.sh"
PYTHON_VERSION=`python3 -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))'`
export PYTHONPATH="/app/lib/python${PYTHON_VERSION}/site-packages:$HOME/.local/lib/python${PYTHON_VERSION}/site-packages"
runtime_branch=`sed -n "s/  track: 'freedesktop-sdk-\(.*\)'\.*$/\1/ p" "${SOURCE_DIR}/buildstream/elements/freedesktop-sdk.bst" | cut -d "." -f 1,2`

OCL_ICD_VENDORS="$GL_TARGET_DIR/OpenCL/vendors"

# Enable PortableCL ICD
echo "/app/lib/libpocl.so" > "$OCL_ICD_VENDORS/pocl.icd" 2> /dev/null

# Enable NVIDIA ICD
find "$GL_TARGET_DIR" -name "nvidia-*" -empty -type d -delete
NVIDIA_VERSION_NAME=`ls $GL_TARGET_DIR|grep "nvidia-*"`
NVIDIA_VERSION=`echo $NVIDIA_VERSION_NAME |sed -e "s/nvidia-//" | sed 's/-/./g'`
if [ ! -z "$NVIDIA_VERSION_NAME" ]; then
    echo "$GL_TARGET_DIR/$NVIDIA_VERSION_NAME/lib/libnvidia-opencl.so.$NVIDIA_VERSION" > "$OCL_ICD_VENDORS/nvidia.icd" 2> /dev/null
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GL_TARGET_DIR/$NVIDIA_VERSION_NAME/lib:"$GL_TARGET_DIR/lib"
fi

# Set EGL vendor dirs
export __EGL_VENDOR_LIBRARY_DIRS="$__EGL_VENDOR_LIBRARY_DIRS:$(find /usr/lib/x86_64-linux-gnu/GL/ -name egl_vendor.d | xargs | tr ' ' ':')"

# Run ssh server to enable remote debugging into development sandbox
buildstream/sshd/run_ssh_server.sh &

declare -A compilers
if [ "$TARGET_PLATFORM" = "darwin" ]; then
    compilers["Clang"]="$TOOLCHAIN_DIR/$HOST-clang++"
    CMAKE_OPTIONS="\
        -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_DIR/../toolchain.cmake \
        -DCMAKE_FIND_ROOT_PATH=$PREFIX \
        -DCMAKE_OSX_DEPLOYMENT_TARGET=$DEPLOYMENT_TARGET_VERSION
    "
elif [ "$TARGET_PLATFORM" = "windows" ]; then
    compilers["GCC"]="$TOOLCHAIN_DIR/$HOST-g++"
    CMAKE_OPTIONS="\
        -DCMAKE_SYSTEM_PROCESSOR=x86_64 \
        -DCMAKE_SYSTEM_NAME=Windows \
        -DCMAKE_C_COMPILER=$HOST-gcc \
        -DCMAKE_PREFIX_PATH=$PREFIX \
        -DPython3_INCLUDE_DIR=$PREFIX/include \
        -DCMAKE_SYSROOT="/usr/$HOST" \
        -DCMAKE_CROSSCOMPILING=TRUE"
elif [ "$TARGET_PLATFORM" = "linux" ]; then
    compilers["Clang"]="$TOOLCHAIN_DIR/clang++"
    compilers["GCC"]="$TOOLCHAIN_DIR/g++"
    export LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:$PREFIX/lib:$LD_LIBRARY_PATH"
fi

export VERBOSE=1

for build_type in Debug RelWithDebInfo
do
    for compiler in "${!compilers[@]}"
    do
        BUILD_FOLDER="builds/$TARGET_TRIPLE/$compiler/$build_type"
        if [ ! -d "$BUILD_FOLDER" ]
        then
            echo CMAKE_CXX_COMPILER="${compilers[$compiler]}"
            cmake -Ssrc -B"$BUILD_FOLDER" \
                -DCMAKE_CXX_COMPILER="${compilers[$compiler]}" \
                -DCMAKE_BUILD_TYPE="$build_type" \
                -DCMAKE_INSTALL_PREFIX=$PREFIX \
                $CMAKE_OPTIONS \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                #-DCMAKE_CXX_INCLUDE_WHAT_YOU_USE="/app/bin/include-what-you-use;-Xiwyu;--error_always"
        fi
    done
done

